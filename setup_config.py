#!/usr/bin/env python3
"""
Configuration setup script for Resume RAG API.

This script helps you easily configure the API by setting environment variables
or creating a .env file with the necessary settings.
"""

import os
import sys
from config import config

def print_header():
    print("üîß Resume RAG API Configuration Setup")
    print("=" * 50)

def check_current_config():
    """Check and display current configuration status."""
    print("\nüìã Current Configuration Status:")
    print("-" * 30)
    
    # Check required settings
    api_key_status = "‚úÖ Set" if config.OPENAI_API_KEY else "‚ùå Missing"
    print(f"OpenAI API Key: {api_key_status}")
    
    if config.OPENAI_API_KEY and config.OPENAI_API_KEY.startswith("sk-"):
        print(f"   Key: {config.OPENAI_API_KEY[:10]}...{config.OPENAI_API_KEY[-4:]}")
    
    print(f"Database URL: {config.DATABASE_URL}")
    print(f"OpenAI Model: {config.OPENAI_MODEL}")
    print(f"Temperature: {config.OPENAI_TEMPERATURE}")
    print(f"Max Tokens: {config.OPENAI_MAX_TOKENS}")
    print(f"Embedding Model: {config.EMBEDDING_MODEL}")
    print(f"Chunk Size: {config.CHUNK_MAX_WORDS} words")
    print(f"Retrieval Limit: {config.RETRIEVAL_LIMIT} chunks")
    print(f"Log Level: {config.LOG_LEVEL}")
    
    return bool(config.OPENAI_API_KEY)

def get_openai_key():
    """Prompt user for OpenAI API key."""
    print("\nüîë OpenAI API Key Setup")
    print("-" * 25)
    print("You need an OpenAI API key to use this service.")
    print("Get one at: https://platform.openai.com/api-keys")
    print()
    
    while True:
        key = input("Enter your OpenAI API key (or 'skip' to continue): ").strip()
        
        if key.lower() == 'skip':
            print("‚ö†Ô∏è  Skipping API key setup. You'll need to set OPENAI_API_KEY manually.")
            return None
        
        if key.startswith('sk-') and len(key) > 20:
            return key
        else:
            print("‚ùå Invalid API key format. Should start with 'sk-' and be longer than 20 characters.")

def setup_environment_variables():
    """Guide user through setting environment variables."""
    print("\nüåç Environment Variables Setup")
    print("-" * 30)
    
    api_key = get_openai_key()
    
    if api_key:
        if sys.platform.startswith('win'):
            print("\nüìã Windows Environment Variables:")
            print(f'set OPENAI_API_KEY={api_key}')
            print('set DB_URL=postgresql://postgres:postgres@localhost:5432/resume_rag')
        else:
            print("\nüìã Unix/Linux/Mac Environment Variables:")
            print(f'export OPENAI_API_KEY="{api_key}"')
            print('export DB_URL="postgresql://postgres:postgres@localhost:5432/resume_rag"')
    
    print("\nüí° Optional settings:")
    print("export OPENAI_MODEL=gpt-3.5-turbo  # For cheaper option")
    print("export OPENAI_TEMPERATURE=0.5      # More conservative")
    print("export LOG_LEVEL=DEBUG             # For debugging")

def create_env_file():
    """Create a .env file with configuration."""
    print("\nüìÑ Creating .env file")
    print("-" * 20)
    
    api_key = get_openai_key()
    
    env_content = f"""# Resume RAG API Configuration
# Generated by setup_config.py

# REQUIRED SETTINGS
OPENAI_API_KEY={api_key or 'your-openai-api-key-here'}

# OPTIONAL OVERRIDES (config.json provides defaults)
# Uncomment and modify to override JSON config settings

# Database
# DB_URL=postgresql://postgres:postgres@localhost:5432/resume_rag

# OpenAI Settings  
# OPENAI_MODEL=gpt-3.5-turbo
# OPENAI_TEMPERATURE=0.5
# OPENAI_MAX_TOKENS=500

# Processing Settings
# CHUNK_MAX_WORDS=150
# RETRIEVAL_LIMIT=8

# API Settings
# API_HOST=127.0.0.1
# API_PORT=8000
# LOG_LEVEL=DEBUG

# Environment (loads different config files)
# ENVIRONMENT=development
"""
    
    try:
        with open('.env', 'w') as f:
            f.write(env_content)
        
        print("‚úÖ Created .env file successfully!")
        print("   üí° Main settings are in config.json")
        print("   üí° Use .env for API key and overrides")
        
        if not api_key:
            print("‚ö†Ô∏è  Don't forget to add your OpenAI API key to the .env file!")
            
    except Exception as e:
        print(f"‚ùå Failed to create .env file: {e}")

def create_custom_config():
    """Create a custom config.json file."""
    print("\nüìÑ Creating custom config.json")
    print("-" * 30)
    
    print("Choose a configuration template:")
    print("1. Default (GPT-4o, 200 word chunks)")
    print("2. Development (GPT-3.5-turbo, smaller chunks, debug logging)")
    print("3. Production (GPT-4o, larger chunks, minimal logging)")
    
    choice = input("Choice (1-3): ").strip()
    
    if choice == "2":
        source_file = "config.development.json"
        target_file = "config.json"
    elif choice == "3":
        source_file = "config.production.json"
        target_file = "config.json"
    else:
        print("Using default config.json (already exists)")
        return
    
    try:
        import shutil
        shutil.copy(source_file, target_file)
        print(f"‚úÖ Copied {source_file} to {target_file}")
        print("   üí° You can edit config.json to customize further")
    except Exception as e:
        print(f"‚ùå Failed to create config file: {e}")

def test_configuration():
    """Test the current configuration."""
    print("\nüß™ Testing Configuration")
    print("-" * 25)
    
    try:
        if not config.validate_required_settings():
            print("‚ùå Configuration validation failed")
            return False
        
        print("‚úÖ Configuration is valid!")
        
        # Test OpenAI connection
        if config.OPENAI_API_KEY:
            print("üîÑ Testing OpenAI connection...")
            try:
                from openai import OpenAI
                client = OpenAI(api_key=config.OPENAI_API_KEY, timeout=5)
                # Just test if we can create a client - don't make actual API calls
                print("‚úÖ OpenAI client initialized successfully")
            except Exception as e:
                print(f"‚ö†Ô∏è  OpenAI client test failed: {e}")
        
        # Test embedding model loading
        print("üîÑ Testing embedding model...")
        try:
            from app.vectorstore.hf_embedder import embedder
            test_text = ["Hello world"]
            embeddings = embedder.encode(test_text)
            if len(embeddings[0]) == config.EMBEDDING_DIM:
                print("‚úÖ Embedding model working correctly")
            else:
                print(f"‚ö†Ô∏è  Embedding dimension mismatch: {len(embeddings[0])} vs {config.EMBEDDING_DIM}")
        except Exception as e:
            print(f"‚ö†Ô∏è  Embedding model test failed: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Configuration test failed: {e}")
        return False

def main():
    print_header()
    
    # Check current configuration
    has_api_key = check_current_config()
    
    if has_api_key:
        print("\n‚úÖ Configuration looks good!")
        
        choice = input("\nWhat would you like to do?\n1. Test configuration\n2. Create .env file\n3. Create custom config.json\n4. Show environment variables\n5. Exit\nChoice (1-5): ").strip()
        
        if choice == '1':
            test_configuration()
        elif choice == '2':
            create_env_file()
        elif choice == '3':
            create_custom_config()
        elif choice == '4':
            setup_environment_variables()
        elif choice == '5':
            print("üëã Goodbye!")
        else:
            print("‚ùå Invalid choice")
    
    else:
        print("\n‚ö†Ô∏è  Configuration incomplete!")
        
        choice = input("\nHow would you like to configure the API?\n1. Set environment variables\n2. Create .env file\n3. Create custom config.json\n4. Exit\nChoice (1-4): ").strip()
        
        if choice == '1':
            setup_environment_variables()
        elif choice == '2':
            create_env_file()
        elif choice == '3':
            create_custom_config()
        elif choice == '4':
            print("üëã Goodbye!")
        else:
            print("‚ùå Invalid choice")
    
    print("\nüöÄ Next steps:")
    print("1. Ensure PostgreSQL with pgvector is running")
    print("2. Start the API: python -m uvicorn app.main:app --reload")
    print("3. Test with: python scripts/smoke_demo.py")

if __name__ == "__main__":
    main()